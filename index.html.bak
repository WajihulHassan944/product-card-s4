<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Game</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="style.css">
  
    <!-- cdn icon link  -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- custom css file  -->
   <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.1.2/socket.io.js"></script>

</head>
<body>
<div class="game-box">
	
	<h1 class="game-box-header" >FANTASY FIGHTER GAME</h1>
	 
	 <h3 style="margin-bottom:20px;">Leader Board</h3>
	 <div class="flexed-div" id="flexedDiv">
	 
	
	 <div class="wrapup">
	<div class="name name-one" id="nameOfWinner">Wajih</div>
	<h3>Wajih scored the best</h3>
	</div>
	
	
	
	</div>
	
	<script>
	document.addEventListener('DOMContentLoaded', () => {
    const flexedDiv = document.getElementById('flexedDiv'); 

    async function getItems() {
        flexedDiv.innerHTML = ''; // Clear the existing content

        try {
            const response = await fetch('https://lovely-mite-leg-warmers.cyclic.app/items');
            const items = await response.json();

            items.forEach((item, index) => {
                // Create a wrapup container for each item
                const wrapupDiv = document.createElement('div');
                wrapupDiv.classList.add('wrapup');

                // Create name div
                const nameDiv = document.createElement('div');
                nameDiv.classList.add('name', `name-${index + 1}`);
                nameDiv.textContent = item.name;

                // Create an h3 element for the description
                const descriptionH3 = document.createElement('h3');
                descriptionH3.textContent = item.description;

                // Append elements to the wrapup container
                wrapupDiv.appendChild(nameDiv);
                wrapupDiv.appendChild(descriptionH3);

                // Append the wrapup container to the parent div
                flexedDiv.appendChild(wrapupDiv);
            });
        } catch (error) {
            console.error('Error fetching items:', error);
        }
    }

    getItems();

});
</script>
	
	
	</div>
	<h6 style="font-size:23px; font-weight:600; color:#ccc; margin-bottom:10px;">My Predictions</h6>
	<p style="color:red;margin-bottom:30px;">(Your predictions will be visible to admins)</p>
	<form id="prediction-form">
  <!-- Input fields for predictions -->
    <div class="input-group">
    <label for="name-input">Your Name:</label>
    <input type="text" id="name-input" name="playerName" required>
  </div>
  <div class="input-group">
    <label for="hp-prediction">HP Prediction:</label>
    <input type="number" id="hp-prediction" name="hpPrediction" min="0">
  </div>
  
  <div class="input-group">
    <label for="bp-prediction">BP Prediction:</label>
    <input type="number" id="bp-prediction" name="bpPrediction" min="0">
  </div>
  
  <div class="input-group">
    <label for="tp-prediction">TP Prediction:</label>
    <input type="number" id="tp-prediction" name="tpPrediction" min="0">
  </div>
  
  <div class="input-group">
    <label for="rw-prediction">RW Prediction:</label>
    <select id="rw-prediction" name="rwPrediction">
      <option value="1">Fighter A (Red)</option>
      <option value="2">Fighter B (Blue)</option>
    </select>
  </div>
  
  <div class="input-group">
    <label for="ko-sp-prediction">KO or SP Prediction:</label>
    <select id="ko-sp-prediction" name="koSpPrediction">
      <option value="KO">KO</option>
      <option value="SP">Survival Points</option>
    </select>
  </div>
  
  <!-- Add more input fields for other predictions -->
  
  <button type="submit">Submit Predictions</button>
</form>
<style>
/* Basic form styling */
#prediction-form {
  width: 400px;
  margin: 0 auto;
  padding: 20px;
  background-color: #f5f5f5;
  border: 1px solid #ddd;
  border-radius: 5px;
  margin-bottom:100px;
}

.input-group {
  margin-bottom: 15px;
}

/* Label styling */
label {
  font-weight: bold;
  display: block;
  margin-bottom: 5px;
}

/* Input field styling */
input[type="text"],
input[type="number"],
select {
  width: 100%;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

/* Button styling */
button {
  background-color: #007bff;
  color: #fff;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}

/* Centering the form */
#prediction-form {
  display: flex;
  flex-direction: column;
  align-items: center;
  align-items:center;
}
</style>
<script>
document.addEventListener('DOMContentLoaded', async () => {
  // Fetch scores from the backend, update scores on the page
  
  const predictionForm = document.getElementById('prediction-form');
  predictionForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    
    const formData = new FormData(predictionForm);
	const playerName = formData.get('playerName'); // Get the entered name
    
    const playerPredictions = {
     player: playerName, // Use the entered name as the player
       round: 1,
      scores: {
        HP: formData.get('hpPrediction'),  // Use 'hpPrediction' matching the input name attribute
        BP: formData.get('bpPrediction'),
        TP: formData.get('tpPrediction'),
        RW: formData.get('rwPrediction'),
        KO_SP: formData.get('koSpPrediction'),  // Assuming you use a single field for KO/SP
        // Add other predictions
      },
    };

    try {
      const response = await fetch('https://lovely-mite-leg-warmers.cyclic.app/api/scores', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(playerPredictions),
      });
      if (response.ok) {
        alert('Predictions submitted successfully');
      } else {
        console.error('Failed to submit predictions');
      }
    } catch (error) {
      console.error('Error submitting predictions:', error);
    }
  });

  // Rest of your code for fetching scores and button clicks
});

</script>




 <h1>Previous Round Results</h1>
<style>
  /* Basic styling for results */
  #results {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 20px;
    background-color: #f5f5f5;
	display:flex;
	justify-content:center;
	align-items:center;
	width:100%;
	max-width:1000px;
	border:2px solid #ccc;
	box-shadow:0 5px 10px rgba(0,0,0,0.2);
	max-height:690px;
	overflow:auto;
  }

  .title {
    font-size: 20px;
    margin-top: 10px;
	padding-bottom:10px;
	border-bottom:2px solid blue;
  }

  .section-title {
    font-size: 16px;
    margin-top: 10px;
  }

  .subsection-title {
    font-size: 14px;
    margin-top: 5px;
  }

  .subsubsection-title {
    font-size: 18px;
    margin-top: 10px auto;
	
  }

  .results-list {
    list-style: none;
    padding:10px auto;
	
  }

  .result-item {
    margin-bottom: 10px;
  }

  .bold {
    font-weight: bold;
	margin:10px auto;
	padding-bottom:10px;
  
  }
   .bold1 {
    font-weight: bold;
	margin:10px auto;
  }
  .results-wrap{
	display:flex;
	flex-direction:column;
	justify-content:center;
	align-items:center;
	width:400px;
	
  }
  .bold11{
	border-top:2px solid gray;
	padding-top:10px;
  }
</style>

<div id="results">
  <div class="results-wrap">
  <div class="title">Player 1 Scores</div>
  <div class="results-container" id="adminPlayer1Results"></div>
</div>


 <div class="results-wrap">
   <div class="title">Player 2 Scores</div>
  <div class="results-container" id="adminPlayer2Results"></div>
</div>
</div>

<script>
const resultsElement = document.getElementById('results');
const adminPlayer1ResultsElement = document.getElementById('adminPlayer1Results');
const adminPlayer2ResultsElement = document.getElementById('adminPlayer2Results');

const backendURL = 'https://lovely-mite-leg-warmers.cyclic.app/api/fetchRoundResults';

async function fetchAndDisplayResults(adminPlayerId, resultsContainer) {
  try {
    const response = await fetch(`${backendURL}?adminPlayerId=${adminPlayerId}`);

    if (response.ok) {
      const results = await response.json();
      // Filter out _id fields from the results
      const sanitizedResults = sanitizeResults(results);
      
      // Display the sanitized results in a more organized format
      resultsContainer.innerHTML = `
        <ul class="results-list">
          ${sanitizedResults.games.map((game) => `
            <li class="result-item">
              <div class="bold">Game Number: <span style="color:red;">${game.gameNumber}</span></div> 
              
              <ul class="results-list">
                ${game.rounds.map((round) => `
                  <li class="result-item">
                    <div class="bold1 bold11">Round Number: ${round.roundNumber}</div> 
                    <div class="subsubsection-title">Scores:</div>
                    <ul class="results-list">
                      ${Object.keys(round.scores).map((scoreKey) => `
                        <li class="result-item"><div class="bold1">${scoreKey}: ${round.scores[scoreKey]}</div> </li>
                      `).join('')}
                    </ul>
                  </li>
                `).join('')}
              </ul>
            </li>
          `).join('')}
        </ul>
      `;
    } else {
      console.error('Failed to fetch round results:', response.status);
      resultsContainer.innerHTML = 'Failed to fetch round results.';
    }
  } catch (error) {
    console.error('Error fetching round results:', error);
    resultsContainer.innerHTML = 'Error fetching round results.';
  }
}

// Function to sanitize results and remove _id fields
function sanitizeResults(results) {
  return JSON.parse(JSON.stringify(results, (key, value) => {
    if (key === '_id') {
      return undefined; // Exclude _id fields
    }
    return value;
  }));
}



async function getAdminPlayerIds() {
  try {
    const firstObjectIdResponse = await fetch('https://lovely-mite-leg-warmers.cyclic.app/getFirstObjectId');
    const lastObjectIdResponse = await fetch('https://lovely-mite-leg-warmers.cyclic.app/getLastObjectId');
    
    if (firstObjectIdResponse.ok && lastObjectIdResponse.ok) {
      const firstObjectIdData = await firstObjectIdResponse.json();
      const lastObjectIdData = await lastObjectIdResponse.json();
      
      const adminPlayer1ObjectId = firstObjectIdData.firstObjectId;
      const adminPlayer2ObjectId = lastObjectIdData.lastObjectId;

      return { adminPlayer1ObjectId, adminPlayer2ObjectId };
    } else {
      console.error('Error fetching admin player IDs:', firstObjectIdResponse.status, lastObjectIdResponse.status);
      return null;
    }
  } catch (error) {
    console.error('Error fetching admin player IDs:', error);
    return null;
  }
}


// Call getAdminPlayerIds to retrieve both admin player IDs
async function getAndDisplayAdminPlayers() {
  const adminPlayerIds = await getAdminPlayerIds();

  if (adminPlayerIds) {
    // Call fetchAndDisplayResults for adminPlayer1ObjectId
    fetchAndDisplayResults(adminPlayerIds.adminPlayer1ObjectId, adminPlayer1ResultsElement);

    // Call fetchAndDisplayResults for adminPlayer2ObjectId
    fetchAndDisplayResults(adminPlayerIds.adminPlayer2ObjectId, adminPlayer2ResultsElement);
  } else {
    console.error('Failed to retrieve admin player IDs.');
  }
}

// Call getAndDisplayAdminPlayers to retrieve and display both admin player results
getAndDisplayAdminPlayers();
</script>

 </body>
</html>
